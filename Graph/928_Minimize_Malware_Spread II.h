#include <vector>
#include <unordered_set>
using namespace std;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int minInfluenced = n;
        int minInfluencedvertex = -1;
        for(int i = 0; i < initial.size(); i++){
            vector<bool> visited(n, false);
            visited[initial[i]] = true;
            int influenced = 0;
            for(int v : initial)
                influenced += dfs(graph, n, v, visited);
            if(influenced < minInfluenced || (influenced == minInfluenced && initial[i] < minInfluencedvertex)){
                minInfluenced = influenced;
                minInfluencedvertex = initial[i];
            }
        }
        return minInfluencedvertex;
    }

private:
    int dfs(vector<vector<int>>& graph, int n,int startv,vector<bool>& visited){
        if(visited[startv]) return 0;
        visited[startv] = true;
        int count = 1;
        for(int i = 0; i < n; i++){
            if(graph[startv][i] && !visited[i])
                count += dfs(graph, n, i, visited);
        }
        return count;
    }
};